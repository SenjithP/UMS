import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const userSchema = mongoose.Schema({

    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true
    }

},{

    timestamps: true // This will automatically add timestamps for any operations done.

});


// ============= Password Hashing Middleware =============
userSchema.pre('save', async function (next) {

    console.log("Saving password");

    if( !this.isModified('password') ) {

        next();

        // If the existing password in user schema was not modified, then avoid hashing and move to next middleware
        // This check is done here because the user schema will have other updates which dosen't involve password updation
        // in that case rehashing password will be skipped

    }

    const salt = await bcrypt.genSalt(10);

    // Hashing the new password using the salt generated by bcrypt
    this.password = await bcrypt.hash(this.password, salt);

});







const User = mongoose.model('User', userSchema);

export default User;